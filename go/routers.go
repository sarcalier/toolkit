/*
 * Mercedes-Benz AG Programming Challenge
 *
 * - Implement the specified REST Endpoint - Protect the API with BasicAuth - Use Docker to run your application - Use one of the following languages&#58; Go, Java, Python, C++ - Automate the infrastructure rollout - Use an external service to determine the city name for depature and destination - Upload your solution to a private GitHub repository - Provide a link to the secured hosted instance of your solution - Provide the following files together with your code&#58;   * Dockerfile   * Build-Script   * Deployment-Script   * Kubernetes deployment YAML (if Kubernetes is used)   * Infrastructure automation scripts   * README.md with documentation how to deploy the infrastructure and the application
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"crypto/subtle"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/urfave/negroni"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func BasicAuth(w http.ResponseWriter, r *http.Request, username, password, realm string) bool {

	user, pass, ok := r.BasicAuth()

	if !ok || subtle.ConstantTimeCompare([]byte(user), []byte(username)) != 1 || subtle.ConstantTimeCompare([]byte(pass), []byte(password)) != 1 {
		w.Header().Set("WWW-Authenticate", `Basic realm="`+realm+`"`)
		w.WriteHeader(401)
		w.Write([]byte("Unauthorised.\n"))
		return false
	}

	return true
}

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	username := "apiuser"
	password := "apipass"
	v2Path := "/v1/trip"
	//v2Router := mux.NewRouter().PathPrefix(v2Path).Subrouter().StrictSlash(true)

	var Route2 Route
	Route2.Name = "Analyze"
	Route2.Method = "POST"
	Route2.Pattern = "/v1/trip"
	Route2.HandlerFunc = Analyze
	//Name("Analyze").
	//	Method(strings.ToUpper("Post")).
	//	Pattern("/v1/trip").
	//	HandlerFunc(Analyze)

	v2Router := mux.NewRouter().StrictSlash(true)
	var handler2 http.Handler
	handler2 = Route2.HandlerFunc
	handler2 = Logger(handler2, "Analyze")
	v2Router.
		Methods("POST").
		Path(v2Path).
		Name("Analyze").
		Handler(handler2)

	router.PathPrefix(v2Path).Handler(negroni.New(
		negroni.HandlerFunc(func(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
			if BasicAuth(w, r, username, password, "Provide user name and password") {
				/* Call the next handler iff Basic-Auth succeeded */
				next(w, r)
			}
		}),
		negroni.Wrap(v2Router),
	))

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v1/",
		Index,
	},

	//	Route{
	//		"Analyze",
	//		"GET",
	//		"/v1/trip",
	//		Index,
	//	},

	//	Route{
	//		"Analyze",
	//		strings.ToUpper("Post"),
	//		"/v1/trip",
	//		Analyze,
	//	},
}
